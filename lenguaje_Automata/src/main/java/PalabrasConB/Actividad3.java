/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PalabrasConB;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author alanh
 */
public class Actividad3 extends javax.swing.JFrame {

    /**
     * Creates new form Actividad3
     */
    String[] palabrasSeparadas = new String[0];
    int contadorPB = 0;
    int contadorArticulos = 0;
    int contadorPPersonales = 0;

    public Actividad3() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txAreaMostrar = new javax.swing.JTextArea();
        txtPalabra = new javax.swing.JTextField();
        btnVerificar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txAContador = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Ingresar palabra");

        txAreaMostrar.setEditable(false);
        txAreaMostrar.setColumns(20);
        txAreaMostrar.setRows(5);
        jScrollPane1.setViewportView(txAreaMostrar);

        btnVerificar.setText("Verificar");
        btnVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarActionPerformed(evt);
            }
        });

        jLabel2.setText("Contador");

        txAContador.setEditable(false);
        txAContador.setColumns(20);
        txAContador.setRows(5);
        jScrollPane2.setViewportView(txAContador);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(418, 418, 418))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVerificar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(392, 392, 392))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(btnVerificar)
                .addGap(75, 75, 75))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarActionPerformed
        contadorPalabras();
        letraB();
        mostrarContadores();
        txtPalabra.setText("");
    }//GEN-LAST:event_btnVerificarActionPerformed
    private String[] separaraPalabras() {
        String palabra = txtPalabra.getText();
        String delimitadores = "[\\s.,\\-?]+"; // Define los delimitadores como espacios, comas, puntos y guiones
        palabrasSeparadas = palabra.split(delimitadores);
        return palabrasSeparadas;
    }

    private void contadorPalabras() {
        String[] palabrasContar = separaraPalabras();
        for (String palabrasC : palabrasContar) {
            if (palabrasC.equalsIgnoreCase("lo") || palabrasC.equalsIgnoreCase("la") || palabrasC.equalsIgnoreCase("las") || palabrasC.equalsIgnoreCase("los")) {
                contadorArticulos++;
            }
            if (palabrasC.equalsIgnoreCase("el") || palabrasC.equalsIgnoreCase("yo") || palabrasC.equalsIgnoreCase("ella") || palabrasC.equalsIgnoreCase("nosotros") || palabrasC.equalsIgnoreCase("nosotras") || palabrasC.equalsIgnoreCase("ellos") || palabrasC.equalsIgnoreCase("ellas")) {
                contadorPPersonales++;
            }
        }
    }

    private void letraB() {
        String[] validacionB = palabrasSeparadas;
        for (String validacion : validacionB) {
            if (reglaLetraB(validacion)) {
                txAreaMostrar.append(validacion + " ----> Cadena válida\n");
            } 
            if(palabrasNoB(validacion)){
                txAreaMostrar.append(validacion+"\n");
            }
        }
    }

    private boolean reglaLetraB(String palabra) {
        String[] validacionB = palabrasSeparadas;
        String[] palabrasConTerminacion = {"buir", "aba", "abas", "ábamos", "abais", "aban", "bio", "ble", "bilidad", "bundo", "bunda"};
        String[] palabrasConIniciacion = {"biblio", "bu", "bur", "bus", "bi", "bis", "biz", "bio", "bien", "bene", "ab", "ob", "br", "rob", "sub"};
        String[] palabrasValidacion = {"herbir", "serbir", "bibir", "vibir", "bida", "budú", "avs", "viblio", "bivlio", "vonito", "escrivir", "recivir", "sucumvir"};
        String[] palabraInicioV = {"vivlio", "vu", "vur", "vus", "vi", "vis", "viz", "vio", "vien", "vene", "av", "ov", "vr", "rov", "suv"};
        if (palabra.endsWith("herbir") || palabra.startsWith("serbir") || palabra.startsWith("bibir")
                || palabra.startsWith("vibir") || palabra.startsWith("bida") || palabra.startsWith("budú") || palabra.startsWith("viblio")
                || palabra.startsWith("bivlio") || palabra.startsWith("vonito") || palabra.startsWith("escrivir") || palabra.startsWith("recivir")
                || palabra.startsWith("sucumvir")) {
            return false;
        } else if (palabra.contains("b") || palabra.contains("B")) {
            for (String palabraI : palabrasConIniciacion) {
                if (palabra.startsWith(palabraI)) {
                    try {
                        Pattern pat = Pattern.compile("([A-Za-z-áéíóúÁÉÍÓÚ][a-záéíóú]+)");
                        Matcher mat = pat.matcher(palabra);

                        if (mat.matches()) {
                            contadorPB++;

                            return true;

                        } else {

                            return false;
                        }
                    } catch (Exception e) {
                        System.err.println("Error en la expresión regular: " + e.getMessage());
                    }
                }
            }
            for (String palabraT : palabrasConTerminacion) {
                try {
                    Pattern pat = Pattern.compile("([A-Za-z-áéíóúÁÉÍÓÚ][a-záéíóú]+)");
                    Matcher mat = pat.matcher(palabra);

                    if (mat.matches()) {
                        contadorPB++;

                        return true;
                    } else {

                        return false;
                    }
                } catch (Exception e) {
                    System.err.println("Error en la expresión regular: " + e.getMessage());
                }
            }
        } else if (palabra.contains("v") || palabra.contains("V")) {
            for (String palabraV : palabraInicioV) {
                if (palabra.endsWith(palabraV)) {
                    return false;
                } else {
                    try {
                        Pattern pat = Pattern.compile("([A-Za-z][a-záéíóú]+|v[abd-mp-záéíóú]+|[A-Za-z][a-záéíóú]+|[A-Za-z][a-z]+)");
                        Matcher mat = pat.matcher(palabra);

                        if (mat.matches()) {

                            return true;
                        } else {

                            return false;
                        }
                    } catch (Exception e) {
                        System.err.println("Error en la expresión regular: " + e.getMessage());
                    }
                }
            }
            return false;
        }
        return false;
    }
    private boolean palabrasNoB(String palabra){
        if(!(palabra.contains("v")||palabra.contains("V")||palabra.contains("b")||palabra.contains("B"))){
            return true;
        }
        return false;
    }

    private void mostrarContadores() {
        txtPalabra.setText("");
        txAContador.append("Total de artículos: " + contadorArticulos + "\n");
        txAContador.append("Total de palabras con B:" + contadorPB+"\n");
        txAContador.append("Total de pronombres personales: " + contadorPPersonales + "\n");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Actividad3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Actividad3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Actividad3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Actividad3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Actividad3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVerificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txAContador;
    private javax.swing.JTextArea txAreaMostrar;
    private javax.swing.JTextField txtPalabra;
    // End of variables declaration//GEN-END:variables
}
