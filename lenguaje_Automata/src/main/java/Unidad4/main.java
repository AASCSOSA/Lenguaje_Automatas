/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Unidad4;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alanh
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    DefaultTableModel tblmodel = new DefaultTableModel();

    public main() {
        initComponents();
        cargarTabla();
    }

    private void cargarTabla() {
        tblmodel.addColumn("Identificadores");
        tblmodel.addColumn("Entero");
        tblmodel.addColumn("Entero largo");
        tblmodel.addColumn("Doble");
        tblmodel.addColumn("Flotante");
        tblmodel.addColumn("Verdadero");
        tblmodel.addColumn("Falso");
        tblmodel.addColumn("Caracter");
        tblmodel.addColumn("Cadena");
        tblMostrar.setModel(tblmodel);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTexto = new javax.swing.JTextField();
        btnVerificar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMostrar = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxtaPrueba = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Ingresar texto:");

        btnVerificar.setText("Verificar");
        btnVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarActionPerformed(evt);
            }
        });

        tblMostrar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblMostrar);

        jtxtaPrueba.setColumns(20);
        jtxtaPrueba.setRows(5);
        jScrollPane2.setViewportView(jtxtaPrueba);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jScrollPane2))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnVerificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(txtTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnVerificar)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarActionPerformed
        CargarMetodos();
    }//GEN-LAST:event_btnVerificarActionPerformed

    private void CargarMetodos() {
        String[] palabrasRS = palabrasReservadas();
        ArrayList<String> palabras = separarCadenas();
        ArrayList<String> obtenerComparacion = compararPalabrasReservadas(palabrasRS, palabras);

        for (String comparacion : obtenerComparacion) {
            jtxtaPrueba.append(comparacion + "\n");
        }
    }

    private String[] palabrasReservadas() {
        String palabrasReservadas[] = {"abstract", "boolean", "break", "byte", "byvalue", "case", "cast", "catch", "char", "class", "const",
            "continue", "default", "do", "double", "else", "extends", "final", "finally", "float", "for", "future", "generic", "goto", "if", "implements",
            "import", "inner", "instanceof", "int", "interface", "long", "native", "new", "null", "operator", "outer", "package", "private", "protected",
            "public", "rest", "return", "short", "static", "super", "switch", "synchronized", "this", "threadsafe", "throw", "transient", "try", "var",
            "void", "while", "id", "int", "long", "double", "float", "boolean", "char", "cadenas", "++", "--", "!", "*", "/", "%", "+", "-", "<",
            ">", "<=", ">=", "==", "!=", "&&", "||", "?", "=", "(", ")", "{", "}", "[", "]", ";", ",", ".", "//", "/*", "/**"
        };
        return palabrasReservadas;
    }

    private ArrayList<String> separarCadenas() {
        String[] palabrasSeparadas = new String[0];
        ArrayList<String> palabraSeparadas = new ArrayList<>();
        String cadenaSeparada = txtTexto.getText();
        if (cadenaSeparada.isEmpty()) {
            return null;
        } else {
            String delimitadores = "(?<=\\W)|(?=\\W)"; //  Esto utiliza una expresión regular para dividir la cadena en lugares donde hay un límite entre caracteres de palabra
            palabrasSeparadas = cadenaSeparada.split(delimitadores);
            //Se recorre el array para tomar los datos que no sean vacio y si es así se guardan en un arraylist
            for (String palabrasSeparada : palabrasSeparadas) {
                if (!palabrasSeparada.isEmpty() && !palabrasSeparada.trim().isEmpty()) {
                    palabraSeparadas.add(palabrasSeparada);
                }
            }
            return palabraSeparadas;
        }
    }

    private ArrayList<String> compararPalabrasReservadas(String[] palabrasRS, ArrayList<String> palabras) {
        ArrayList<String> comparacion = new ArrayList<>();
        String[] palabrasRes = palabrasRS;
        ArrayList<String> palabrasS = palabras;
        int contador;
        //Recorre los array, se realiza una comparación y se reinicia el contador para que pueda este volver a entrar a la instrucción
        for (String palabrasSeparadas : palabrasS) {
            contador = 0;
            for (String palabrasReservas : palabrasRes) {
                contador++;
                if (palabrasReservas.equals(palabrasSeparadas)) {
                    if (contador >= 0 && contador <= 56) {
                        comparacion.add(contador + " Palabra reservada " + palabrasSeparadas);
                    } else if (contador == 57) {
                        comparacion.add(contador + " Identificador " + palabrasSeparadas);
                    } else if (contador >= 58 && contador <= 64) {
                        comparacion.add(contador + " Literales " + palabrasSeparadas);
                    } else if (contador >= 65 && contador <= 82) {
                        comparacion.add(contador + " Operadores " + palabrasSeparadas);
                    } else if (contador >= 83 && contador <= 91) {
                        comparacion.add(contador + " Delimitador " + palabrasSeparadas);
                    } else if (contador >= 92 && contador <= 94) {
                        comparacion.add(contador + " Comentarios " + palabrasSeparadas);
                    } 
                }
            }
        }
        return comparacion;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVerificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jtxtaPrueba;
    private javax.swing.JTable tblMostrar;
    private javax.swing.JTextField txtTexto;
    // End of variables declaration//GEN-END:variables
}
